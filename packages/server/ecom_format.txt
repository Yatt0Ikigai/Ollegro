document signatures:
	#_id field is automatic
	listing (used for current and historic databases)
		_id
		name
		description
		date
		tags
		price
		seller
	historic
		_id
		listing:{}
		rated
		buyer
	user
		_id
		name
		password hash
		privillige
		rating
		ratenum
		products_sold

data is sent in JSON file format, which in practice os no different from a dictionary

operations:
	user
		get
		create
		delete
		confirm password
	listing
		get list
		create
		buy
		delete
	transaction
		get user's
		rate
	perform - execute code

userdata is always of person sending request
request signatures:
	get user:
		userdata:{login,password}
		login:""
	create account:
		login:""
		password:""
		privilige:int
		userdata:{login:"",password:""} #only present if privilige is not 0 (admin)
	delete account:
		userdata:{login,password}
		login:""
	confirm login:
		userdata:{login:"",password:""}
	get listing:
		tags:""
		sort:""
		name:""
		filter:{[category_name:{min:int,max:int}]} #set values to 'null' for not existing
		amount:int
		start:int
	create listing:
		userdata:{login:"",password:""}
		listing:{name:"",description:"",price:"",tags:[""]}
	delete listing:
		userdata:{login:"",password:""}
		listing_id:""
	buy listing:
		userdata:{login,password}
		listing_id:""	
	get history:
		userdata:{login,password}
		login:""
		amount:int
		start:int
	rate transaction:
		userdata:{login,password}
		id:""
	execute command:
		userdata:{login,password}
		command:""

for not "success" "data" isn't sent
response signature:
	default:
		result:""
	get listing:
		data:[{listing}]
	get user:
		data:{user} #posts empty=
	get history:
		data:{[transaction]}
	execute command:
		output:""
response errors:
	universal:
		"fail"				default error value, shouldn't appear
		"account doesnt exist"		userdata login doesn't exist
		"wrong password"		userdata login doesn't match password
		"wrong privilige"		privilige level is too low (userdata doesn't match data owner and userdata is not admin)
	delete:
		"deleted" X "doesnt exist"	
	create account:
		"account already exists"
	rate transaction
		"transaction dosent exist"
	buy listing:
		"listing doesnt exist"
	get user:
		"seeking account doesnt exists"
	
